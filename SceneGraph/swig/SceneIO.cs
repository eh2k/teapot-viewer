//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace eh {

public class SceneIO : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal SceneIO(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SceneIO obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~SceneIO() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          ehPINVOKE.delete_SceneIO(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public static void RegisterPlugIn(IPlugIn plugIn) {
    ehPINVOKE.SceneIO_RegisterPlugIn(IPlugIn.getCPtr(plugIn));
  }

  public static IGroupNode TryRead(string filePath, Callback callback) {
    global::System.IntPtr cPtr = ehPINVOKE.SceneIO_TryRead__SWIG_0(filePath, Callback.getCPtr(callback));
    IGroupNode ret = (cPtr == global::System.IntPtr.Zero) ? null : new IGroupNode(cPtr, true);
    if (ehPINVOKE.SWIGPendingException.Pending) throw ehPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static IGroupNode TryRead(string filePath) {
    global::System.IntPtr cPtr = ehPINVOKE.SceneIO_TryRead__SWIG_1(filePath);
    IGroupNode ret = (cPtr == global::System.IntPtr.Zero) ? null : new IGroupNode(cPtr, true);
    if (ehPINVOKE.SWIGPendingException.Pending) throw ehPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string GetFileWildcards(bool read) {
    string ret = ehPINVOKE.SceneIO_GetFileWildcards__SWIG_0(read);
    return ret;
  }

  public static string GetFileWildcards() {
    string ret = ehPINVOKE.SceneIO_GetFileWildcards__SWIG_1();
    return ret;
  }

  public static string GetAboutString() {
    string ret = ehPINVOKE.SceneIO_GetAboutString();
    return ret;
  }

  public SceneIO() : this(ehPINVOKE.new_SceneIO(), true) {
  }

}

}
