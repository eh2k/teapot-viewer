//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace eh {

public class Rect : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Rect(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Rect obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~Rect() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          ehPINVOKE.delete_Rect(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public Rect() : this(ehPINVOKE.new_Rect__SWIG_0(), true) {
  }

  public Rect(float _x, float _y, float _dx, float _dy) : this(ehPINVOKE.new_Rect__SWIG_1(_x, _y, _dx, _dy), true) {
  }

  public void OffsetRect(float _x, float _y) {
    ehPINVOKE.Rect_OffsetRect(swigCPtr, _x, _y);
  }

  public void setLTRB(float l, float t, float r, float b) {
    ehPINVOKE.Rect_setLTRB(swigCPtr, l, t, r, b);
  }

  public void setRight(float r) {
    ehPINVOKE.Rect_setRight(swigCPtr, r);
  }

  public void setBottom(float b) {
    ehPINVOKE.Rect_setBottom(swigCPtr, b);
  }

  public float Width() {
    float ret = ehPINVOKE.Rect_Width(swigCPtr);
    return ret;
  }

  public float Height() {
    float ret = ehPINVOKE.Rect_Height(swigCPtr);
    return ret;
  }

  public float Left() {
    float ret = ehPINVOKE.Rect_Left(swigCPtr);
    return ret;
  }

  public float Right() {
    float ret = ehPINVOKE.Rect_Right(swigCPtr);
    return ret;
  }

  public float Top() {
    float ret = ehPINVOKE.Rect_Top(swigCPtr);
    return ret;
  }

  public float Bottom() {
    float ret = ehPINVOKE.Rect_Bottom(swigCPtr);
    return ret;
  }

}

}
