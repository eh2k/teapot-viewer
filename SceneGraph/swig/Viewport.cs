//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace eh {

public class Viewport : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Viewport(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Viewport obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~Viewport() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          ehPINVOKE.delete_Viewport(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public static IViewport CreateViewport(global::System.IntPtr hWindow, int driver) {
    global::System.IntPtr cPtr = ehPINVOKE.Viewport_CreateViewport__SWIG_0(hWindow, driver);
    IViewport ret = (cPtr == global::System.IntPtr.Zero) ? null : new IViewport(cPtr, true);
    return ret;
  }

  public static IViewport CreateViewport(global::System.IntPtr hWindow) {
    global::System.IntPtr cPtr = ehPINVOKE.Viewport_CreateViewport__SWIG_1(hWindow);
    IViewport ret = (cPtr == global::System.IntPtr.Zero) ? null : new IViewport(cPtr, true);
    return ret;
  }

  public Viewport() : this(ehPINVOKE.new_Viewport(), true) {
  }

  public static readonly int OpenGL = ehPINVOKE.Viewport_OpenGL_get();
  public static readonly int Direct3D = ehPINVOKE.Viewport_Direct3D_get();
}

}
