//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace eh {

public class Frustum : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Frustum(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Frustum obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~Frustum() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          ehPINVOKE.delete_Frustum(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public void extractFrom(Matrix proj, Matrix modl) {
    ehPINVOKE.Frustum_extractFrom(swigCPtr, Matrix.getCPtr(proj), Matrix.getCPtr(modl));
    if (ehPINVOKE.SWIGPendingException.Pending) throw ehPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool isPointInside(Vec3 v) {
    bool ret = ehPINVOKE.Frustum_isPointInside(swigCPtr, Vec3.getCPtr(v));
    if (ehPINVOKE.SWIGPendingException.Pending) throw ehPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint isAABBInside(Vec3 pos, Vec3 size) {
    uint ret = ehPINVOKE.Frustum_isAABBInside__SWIG_0(swigCPtr, Vec3.getCPtr(pos), Vec3.getCPtr(size));
    if (ehPINVOKE.SWIGPendingException.Pending) throw ehPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint isAABBInside(AABBox aab) {
    uint ret = ehPINVOKE.Frustum_isAABBInside__SWIG_1(swigCPtr, AABBox.getCPtr(aab));
    if (ehPINVOKE.SWIGPendingException.Pending) throw ehPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool isSphereInside(float x, float y, float z, float radius) {
    bool ret = ehPINVOKE.Frustum_isSphereInside(swigCPtr, x, y, z, radius);
    return ret;
  }

  public bool isCubeInside(float x, float y, float z, float size) {
    bool ret = ehPINVOKE.Frustum_isCubeInside(swigCPtr, x, y, z, size);
    return ret;
  }

  public Plane getTopPlane() {
    Plane ret = new Plane(ehPINVOKE.Frustum_getTopPlane(swigCPtr), false);
    return ret;
  }

  public Plane getBottomPlane() {
    Plane ret = new Plane(ehPINVOKE.Frustum_getBottomPlane(swigCPtr), false);
    return ret;
  }

  public Plane getLeftPlane() {
    Plane ret = new Plane(ehPINVOKE.Frustum_getLeftPlane(swigCPtr), false);
    return ret;
  }

  public Plane getRightPlane() {
    Plane ret = new Plane(ehPINVOKE.Frustum_getRightPlane(swigCPtr), false);
    return ret;
  }

  public Plane getBackPlane() {
    Plane ret = new Plane(ehPINVOKE.Frustum_getBackPlane(swigCPtr), false);
    return ret;
  }

  public Plane getFrontPlane() {
    Plane ret = new Plane(ehPINVOKE.Frustum_getFrontPlane(swigCPtr), false);
    return ret;
  }

  public Frustum() : this(ehPINVOKE.new_Frustum(), true) {
  }

}

}
