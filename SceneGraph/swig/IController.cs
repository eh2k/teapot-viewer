//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace eh {

public class IController : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal IController(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(IController obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~IController() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          ehPINVOKE.delete_IController(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public virtual void OnMouseMove(int nFlags, int x, int y) {
    ehPINVOKE.IController_OnMouseMove(swigCPtr, nFlags, x, y);
  }

  public virtual void OnMouseDown(int nFlags, int x, int y) {
    ehPINVOKE.IController_OnMouseDown(swigCPtr, nFlags, x, y);
  }

  public virtual void OnMouseUp(int nFlags, int x, int y) {
    ehPINVOKE.IController_OnMouseUp(swigCPtr, nFlags, x, y);
  }

  public virtual void OnMouseWheel(int nFlags, short zDelta, int x, int y) {
    ehPINVOKE.IController_OnMouseWheel(swigCPtr, nFlags, zDelta, x, y);
  }

  public virtual void OnKeyDown(int nKeyCode) {
    ehPINVOKE.IController_OnKeyDown(swigCPtr, nKeyCode);
  }

  public virtual void Animate() {
    ehPINVOKE.IController_Animate(swigCPtr);
  }

  public static readonly int LBUTTON = ehPINVOKE.IController_LBUTTON_get();
  public static readonly int RBUTTON = ehPINVOKE.IController_RBUTTON_get();
  public static readonly int SHIFT = ehPINVOKE.IController_SHIFT_get();
  public static readonly int CONTROL = ehPINVOKE.IController_CONTROL_get();
  public static readonly int MBUTTON = ehPINVOKE.IController_MBUTTON_get();
}

}
