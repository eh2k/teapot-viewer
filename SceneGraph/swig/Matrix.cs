//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace eh {

public class Matrix : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Matrix(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Matrix obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~Matrix() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          ehPINVOKE.delete_Matrix(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public Matrix(bool bInit) : this(ehPINVOKE.new_Matrix__SWIG_0(bInit), true) {
  }

  public Matrix() : this(ehPINVOKE.new_Matrix__SWIG_1(), true) {
  }

  public Matrix(Matrix m) : this(ehPINVOKE.new_Matrix__SWIG_2(Matrix.getCPtr(m)), true) {
    if (ehPINVOKE.SWIGPendingException.Pending) throw ehPINVOKE.SWIGPendingException.Retrieve();
  }

  public Matrix(float a1, float a2, float a3, float a4, float b1, float b2, float b3, float b4, float c1, float c2, float c3, float c4, float d1, float d2, float d3, float d4) : this(ehPINVOKE.new_Matrix__SWIG_3(a1, a2, a3, a4, b1, b2, b3, b4, c1, c2, c3, c4, d1, d2, d3, d4), true) {
  }

  public void loadIdentity() {
    ehPINVOKE.Matrix_loadIdentity(swigCPtr);
  }

  public static Matrix Identity() {
    Matrix ret = new Matrix(ehPINVOKE.Matrix_Identity(), false);
    return ret;
  }

  public static Matrix Inverse(Matrix m) {
    Matrix ret = new Matrix(ehPINVOKE.Matrix_Inverse(Matrix.getCPtr(m)), true);
    if (ehPINVOKE.SWIGPendingException.Pending) throw ehPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Matrix Translation(Vec3 t) {
    Matrix ret = new Matrix(ehPINVOKE.Matrix_Translation(Vec3.getCPtr(t)), true);
    if (ehPINVOKE.SWIGPendingException.Pending) throw ehPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Matrix Scale(Vec3 s) {
    Matrix ret = new Matrix(ehPINVOKE.Matrix_Scale(Vec3.getCPtr(s)), true);
    if (ehPINVOKE.SWIGPendingException.Pending) throw ehPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Matrix Rotation(Vec3 axis, float angle) {
    Matrix ret = new Matrix(ehPINVOKE.Matrix_Rotation(Vec3.getCPtr(axis), angle), true);
    if (ehPINVOKE.SWIGPendingException.Pending) throw ehPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Matrix Frustum(float l, float r, float b, float t, float n, float f) {
    Matrix ret = new Matrix(ehPINVOKE.Matrix_Frustum(l, r, b, t, n, f), true);
    return ret;
  }

  public static Matrix Ortho(float l, float r, float b, float t, float n, float f) {
    Matrix ret = new Matrix(ehPINVOKE.Matrix_Ortho(l, r, b, t, n, f), true);
    return ret;
  }

  public static Matrix Lookat(Vec3 eye, Vec3 center, Vec3 up) {
    Matrix ret = new Matrix(ehPINVOKE.Matrix_Lookat(Vec3.getCPtr(eye), Vec3.getCPtr(center), Vec3.getCPtr(up)), true);
    if (ehPINVOKE.SWIGPendingException.Pending) throw ehPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Matrix Shadow(Plane groundplane, Vec3 light) {
    Matrix ret = new Matrix(ehPINVOKE.Matrix_Shadow(Plane.getCPtr(groundplane), Vec3.getCPtr(light)), true);
    if (ehPINVOKE.SWIGPendingException.Pending) throw ehPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Matrix getInverted() {
    Matrix ret = new Matrix(ehPINVOKE.Matrix_getInverted(swigCPtr), true);
    return ret;
  }

  public class Stack : global::System.IDisposable {
    private global::System.Runtime.InteropServices.HandleRef swigCPtr;
    protected bool swigCMemOwn;
  
    internal Stack(global::System.IntPtr cPtr, bool cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
    }
  
    internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Stack obj) {
      return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
    }
  
    ~Stack() {
      Dispose();
    }
  
    public virtual void Dispose() {
      lock(this) {
        if (swigCPtr.Handle != global::System.IntPtr.Zero) {
          if (swigCMemOwn) {
            swigCMemOwn = false;
            ehPINVOKE.delete_Matrix_Stack(swigCPtr);
          }
          swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
        }
        global::System.GC.SuppressFinalize(this);
      }
    }
  
    public Stack() : this(ehPINVOKE.new_Matrix_Stack(), true) {
    }
  
    public void clear(Matrix mat) {
      ehPINVOKE.Matrix_Stack_clear(swigCPtr, Matrix.getCPtr(mat));
      if (ehPINVOKE.SWIGPendingException.Pending) throw ehPINVOKE.SWIGPendingException.Retrieve();
    }
  
    public uint getStackSize() {
      uint ret = ehPINVOKE.Matrix_Stack_getStackSize(swigCPtr);
      return ret;
    }
  
    public Matrix getTop() {
      Matrix ret = new Matrix(ehPINVOKE.Matrix_Stack_getTop(swigCPtr), false);
      return ret;
    }
  
    public void set(Matrix m) {
      ehPINVOKE.Matrix_Stack_set(swigCPtr, Matrix.getCPtr(m));
      if (ehPINVOKE.SWIGPendingException.Pending) throw ehPINVOKE.SWIGPendingException.Retrieve();
    }
  
    public void translate(Vec3 v) {
      ehPINVOKE.Matrix_Stack_translate(swigCPtr, Vec3.getCPtr(v));
      if (ehPINVOKE.SWIGPendingException.Pending) throw ehPINVOKE.SWIGPendingException.Retrieve();
    }
  
    public void rotate(Vec3 v, float a) {
      ehPINVOKE.Matrix_Stack_rotate(swigCPtr, Vec3.getCPtr(v), a);
      if (ehPINVOKE.SWIGPendingException.Pending) throw ehPINVOKE.SWIGPendingException.Retrieve();
    }
  
    public void scale(Vec3 v) {
      ehPINVOKE.Matrix_Stack_scale(swigCPtr, Vec3.getCPtr(v));
      if (ehPINVOKE.SWIGPendingException.Pending) throw ehPINVOKE.SWIGPendingException.Retrieve();
    }
  
    public void mult(Matrix m) {
      ehPINVOKE.Matrix_Stack_mult(swigCPtr, Matrix.getCPtr(m));
      if (ehPINVOKE.SWIGPendingException.Pending) throw ehPINVOKE.SWIGPendingException.Retrieve();
    }
  
    public void push() {
      ehPINVOKE.Matrix_Stack_push(swigCPtr);
    }
  
    public void pop() {
      ehPINVOKE.Matrix_Stack_pop(swigCPtr);
    }
  
    public void loadIdentity() {
      ehPINVOKE.Matrix_Stack_loadIdentity(swigCPtr);
    }
  
  }

}

}
