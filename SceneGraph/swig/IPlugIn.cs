//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace eh {

public class IPlugIn : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnBase;

  internal IPlugIn(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwnBase = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(IPlugIn obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~IPlugIn() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnBase) {
          swigCMemOwnBase = false;
          ehPINVOKE.delete_IPlugIn(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public virtual string about() {
    string ret = (SwigDerivedClassHasMethod("about", swigMethodTypes0) ? ehPINVOKE.IPlugIn_aboutSwigExplicitIPlugIn(swigCPtr) : ehPINVOKE.IPlugIn_about(swigCPtr));
    if (ehPINVOKE.SWIGPendingException.Pending) throw ehPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual int file_type_count() {
    int ret = (SwigDerivedClassHasMethod("file_type_count", swigMethodTypes1) ? ehPINVOKE.IPlugIn_file_type_countSwigExplicitIPlugIn(swigCPtr) : ehPINVOKE.IPlugIn_file_type_count(swigCPtr));
    if (ehPINVOKE.SWIGPendingException.Pending) throw ehPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual string file_type(int i) {
    string ret = (SwigDerivedClassHasMethod("file_type", swigMethodTypes2) ? ehPINVOKE.IPlugIn_file_typeSwigExplicitIPlugIn(swigCPtr, i) : ehPINVOKE.IPlugIn_file_type(swigCPtr, i));
    if (ehPINVOKE.SWIGPendingException.Pending) throw ehPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual string file_exts(int i) {
    string ret = (SwigDerivedClassHasMethod("file_exts", swigMethodTypes3) ? ehPINVOKE.IPlugIn_file_extsSwigExplicitIPlugIn(swigCPtr, i) : ehPINVOKE.IPlugIn_file_exts(swigCPtr, i));
    if (ehPINVOKE.SWIGPendingException.Pending) throw ehPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool canWrite(int i) {
    bool ret = (SwigDerivedClassHasMethod("canWrite", swigMethodTypes4) ? ehPINVOKE.IPlugIn_canWriteSwigExplicitIPlugIn(swigCPtr, i) : ehPINVOKE.IPlugIn_canWrite(swigCPtr, i));
    if (ehPINVOKE.SWIGPendingException.Pending) throw ehPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool canRead(int i) {
    bool ret = (SwigDerivedClassHasMethod("canRead", swigMethodTypes5) ? ehPINVOKE.IPlugIn_canReadSwigExplicitIPlugIn(swigCPtr, i) : ehPINVOKE.IPlugIn_canRead(swigCPtr, i));
    if (ehPINVOKE.SWIGPendingException.Pending) throw ehPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool readFile(string aFile, global::System.IntPtr sceneHandle, Callback callback) {
    bool ret = (SwigDerivedClassHasMethod("readFile", swigMethodTypes6) ? ehPINVOKE.IPlugIn_readFileSwigExplicitIPlugIn__SWIG_0(swigCPtr, aFile, sceneHandle, Callback.getCPtr(callback)) : ehPINVOKE.IPlugIn_readFile__SWIG_0(swigCPtr, aFile, sceneHandle, Callback.getCPtr(callback)));
    if (ehPINVOKE.SWIGPendingException.Pending) throw ehPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool readFile(string aFile, global::System.IntPtr sceneHandle) {
    bool ret = (SwigDerivedClassHasMethod("readFile", swigMethodTypes7) ? ehPINVOKE.IPlugIn_readFileSwigExplicitIPlugIn__SWIG_1(swigCPtr, aFile, sceneHandle) : ehPINVOKE.IPlugIn_readFile__SWIG_1(swigCPtr, aFile, sceneHandle));
    if (ehPINVOKE.SWIGPendingException.Pending) throw ehPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool writeFile(string sFile, global::System.IntPtr sceneHandle, Callback callback) {
    bool ret = (SwigDerivedClassHasMethod("writeFile", swigMethodTypes8) ? ehPINVOKE.IPlugIn_writeFileSwigExplicitIPlugIn__SWIG_0(swigCPtr, sFile, sceneHandle, Callback.getCPtr(callback)) : ehPINVOKE.IPlugIn_writeFile__SWIG_0(swigCPtr, sFile, sceneHandle, Callback.getCPtr(callback)));
    if (ehPINVOKE.SWIGPendingException.Pending) throw ehPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool writeFile(string sFile, global::System.IntPtr sceneHandle) {
    bool ret = (SwigDerivedClassHasMethod("writeFile", swigMethodTypes9) ? ehPINVOKE.IPlugIn_writeFileSwigExplicitIPlugIn__SWIG_1(swigCPtr, sFile, sceneHandle) : ehPINVOKE.IPlugIn_writeFile__SWIG_1(swigCPtr, sFile, sceneHandle));
    if (ehPINVOKE.SWIGPendingException.Pending) throw ehPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public IPlugIn() : this(ehPINVOKE.new_IPlugIn(), true) {
    SwigDirectorConnect();
  }

  private void SwigDirectorConnect() {
    if (SwigDerivedClassHasMethod("about", swigMethodTypes0))
      swigDelegate0 = new SwigDelegateIPlugIn_0(SwigDirectorabout);
    if (SwigDerivedClassHasMethod("file_type_count", swigMethodTypes1))
      swigDelegate1 = new SwigDelegateIPlugIn_1(SwigDirectorfile_type_count);
    if (SwigDerivedClassHasMethod("file_type", swigMethodTypes2))
      swigDelegate2 = new SwigDelegateIPlugIn_2(SwigDirectorfile_type);
    if (SwigDerivedClassHasMethod("file_exts", swigMethodTypes3))
      swigDelegate3 = new SwigDelegateIPlugIn_3(SwigDirectorfile_exts);
    if (SwigDerivedClassHasMethod("canWrite", swigMethodTypes4))
      swigDelegate4 = new SwigDelegateIPlugIn_4(SwigDirectorcanWrite);
    if (SwigDerivedClassHasMethod("canRead", swigMethodTypes5))
      swigDelegate5 = new SwigDelegateIPlugIn_5(SwigDirectorcanRead);
    if (SwigDerivedClassHasMethod("readFile", swigMethodTypes6))
      swigDelegate6 = new SwigDelegateIPlugIn_6(SwigDirectorreadFile__SWIG_0);
    if (SwigDerivedClassHasMethod("readFile", swigMethodTypes7))
      swigDelegate7 = new SwigDelegateIPlugIn_7(SwigDirectorreadFile__SWIG_1);
    if (SwigDerivedClassHasMethod("writeFile", swigMethodTypes8))
      swigDelegate8 = new SwigDelegateIPlugIn_8(SwigDirectorwriteFile__SWIG_0);
    if (SwigDerivedClassHasMethod("writeFile", swigMethodTypes9))
      swigDelegate9 = new SwigDelegateIPlugIn_9(SwigDirectorwriteFile__SWIG_1);
    ehPINVOKE.IPlugIn_director_connect(swigCPtr, swigDelegate0, swigDelegate1, swigDelegate2, swigDelegate3, swigDelegate4, swigDelegate5, swigDelegate6, swigDelegate7, swigDelegate8, swigDelegate9);
  }

  private bool SwigDerivedClassHasMethod(string methodName, global::System.Type[] methodTypes) {
    global::System.Reflection.MethodInfo methodInfo = this.GetType().GetMethod(methodName, global::System.Reflection.BindingFlags.Public | global::System.Reflection.BindingFlags.NonPublic | global::System.Reflection.BindingFlags.Instance, null, methodTypes, null);
    bool hasDerivedMethod = methodInfo.DeclaringType.IsSubclassOf(typeof(IPlugIn));
    return hasDerivedMethod;
  }

  [return: global::System.Runtime.InteropServices.MarshalAs(global::System.Runtime.InteropServices.UnmanagedType.LPWStr)]
  private string SwigDirectorabout() {
    return about();
  }

  private int SwigDirectorfile_type_count() {
    return file_type_count();
  }

  [return: global::System.Runtime.InteropServices.MarshalAs(global::System.Runtime.InteropServices.UnmanagedType.LPWStr)]
  private string SwigDirectorfile_type(int i) {
    return file_type(i);
  }

  [return: global::System.Runtime.InteropServices.MarshalAs(global::System.Runtime.InteropServices.UnmanagedType.LPWStr)]
  private string SwigDirectorfile_exts(int i) {
    return file_exts(i);
  }

  private bool SwigDirectorcanWrite(int i) {
    return canWrite(i);
  }

  private bool SwigDirectorcanRead(int i) {
    return canRead(i);
  }

  private bool SwigDirectorreadFile__SWIG_0(string aFile, global::System.IntPtr sceneHandle, global::System.IntPtr callback) {
    return readFile(aFile, sceneHandle, (callback == global::System.IntPtr.Zero) ? null : new Callback(callback, false));
  }

  private bool SwigDirectorreadFile__SWIG_1(string aFile, global::System.IntPtr sceneHandle) {
    return readFile(aFile, sceneHandle);
  }

  private bool SwigDirectorwriteFile__SWIG_0(string sFile, global::System.IntPtr sceneHandle, global::System.IntPtr callback) {
    return writeFile(sFile, sceneHandle, (callback == global::System.IntPtr.Zero) ? null : new Callback(callback, false));
  }

  private bool SwigDirectorwriteFile__SWIG_1(string sFile, global::System.IntPtr sceneHandle) {
    return writeFile(sFile, sceneHandle);
  }

  [return: global::System.Runtime.InteropServices.MarshalAs(global::System.Runtime.InteropServices.UnmanagedType.LPWStr)]
  public delegate string SwigDelegateIPlugIn_0();
  public delegate int SwigDelegateIPlugIn_1();
  [return: global::System.Runtime.InteropServices.MarshalAs(global::System.Runtime.InteropServices.UnmanagedType.LPWStr)]
  public delegate string SwigDelegateIPlugIn_2(int i);
  [return: global::System.Runtime.InteropServices.MarshalAs(global::System.Runtime.InteropServices.UnmanagedType.LPWStr)]
  public delegate string SwigDelegateIPlugIn_3(int i);
  public delegate bool SwigDelegateIPlugIn_4(int i);
  public delegate bool SwigDelegateIPlugIn_5(int i);
  public delegate bool SwigDelegateIPlugIn_6(string aFile, global::System.IntPtr sceneHandle, global::System.IntPtr callback);
  public delegate bool SwigDelegateIPlugIn_7(string aFile, global::System.IntPtr sceneHandle);
  public delegate bool SwigDelegateIPlugIn_8(string sFile, global::System.IntPtr sceneHandle, global::System.IntPtr callback);
  public delegate bool SwigDelegateIPlugIn_9(string sFile, global::System.IntPtr sceneHandle);

  private SwigDelegateIPlugIn_0 swigDelegate0;
  private SwigDelegateIPlugIn_1 swigDelegate1;
  private SwigDelegateIPlugIn_2 swigDelegate2;
  private SwigDelegateIPlugIn_3 swigDelegate3;
  private SwigDelegateIPlugIn_4 swigDelegate4;
  private SwigDelegateIPlugIn_5 swigDelegate5;
  private SwigDelegateIPlugIn_6 swigDelegate6;
  private SwigDelegateIPlugIn_7 swigDelegate7;
  private SwigDelegateIPlugIn_8 swigDelegate8;
  private SwigDelegateIPlugIn_9 swigDelegate9;

  private static global::System.Type[] swigMethodTypes0 = new global::System.Type[] {  };
  private static global::System.Type[] swigMethodTypes1 = new global::System.Type[] {  };
  private static global::System.Type[] swigMethodTypes2 = new global::System.Type[] { typeof(int) };
  private static global::System.Type[] swigMethodTypes3 = new global::System.Type[] { typeof(int) };
  private static global::System.Type[] swigMethodTypes4 = new global::System.Type[] { typeof(int) };
  private static global::System.Type[] swigMethodTypes5 = new global::System.Type[] { typeof(int) };
  private static global::System.Type[] swigMethodTypes6 = new global::System.Type[] { typeof(string), typeof(global::System.IntPtr), typeof(Callback) };
  private static global::System.Type[] swigMethodTypes7 = new global::System.Type[] { typeof(string), typeof(global::System.IntPtr) };
  private static global::System.Type[] swigMethodTypes8 = new global::System.Type[] { typeof(string), typeof(global::System.IntPtr), typeof(Callback) };
  private static global::System.Type[] swigMethodTypes9 = new global::System.Type[] { typeof(string), typeof(global::System.IntPtr) };
}

}
