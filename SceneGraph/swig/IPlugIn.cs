//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace eh {

public class IPlugIn : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnBase;

  internal IPlugIn(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwnBase = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(IPlugIn obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~IPlugIn() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnBase) {
          swigCMemOwnBase = false;
          ehPINVOKE.delete_IPlugIn(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public virtual string GetAboutString() {
    string ret = ehPINVOKE.IPlugIn_GetAboutString(swigCPtr);
    if (ehPINVOKE.SWIGPendingException.Pending) throw ehPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual int GetFileTypeCount() {
    int ret = ehPINVOKE.IPlugIn_GetFileTypeCount(swigCPtr);
    if (ehPINVOKE.SWIGPendingException.Pending) throw ehPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual string GetFileType(int i) {
    string ret = ehPINVOKE.IPlugIn_GetFileType(swigCPtr, i);
    if (ehPINVOKE.SWIGPendingException.Pending) throw ehPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual string GetFileExtention(int i) {
    string ret = ehPINVOKE.IPlugIn_GetFileExtention(swigCPtr, i);
    if (ehPINVOKE.SWIGPendingException.Pending) throw ehPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool ReadFile(string aFile, global::System.IntPtr sceneHandle, Callback callback) {
    bool ret = ehPINVOKE.IPlugIn_ReadFile__SWIG_0(swigCPtr, aFile, sceneHandle, Callback.getCPtr(callback));
    if (ehPINVOKE.SWIGPendingException.Pending) throw ehPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool ReadFile(string aFile, global::System.IntPtr sceneHandle) {
    bool ret = ehPINVOKE.IPlugIn_ReadFile__SWIG_1(swigCPtr, aFile, sceneHandle);
    if (ehPINVOKE.SWIGPendingException.Pending) throw ehPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public IPlugIn() : this(ehPINVOKE.new_IPlugIn(), true) {
    SwigDirectorConnect();
  }

  private void SwigDirectorConnect() {
    if (SwigDerivedClassHasMethod("GetAboutString", swigMethodTypes0))
      swigDelegate0 = new SwigDelegateIPlugIn_0(SwigDirectorGetAboutString);
    if (SwigDerivedClassHasMethod("GetFileTypeCount", swigMethodTypes1))
      swigDelegate1 = new SwigDelegateIPlugIn_1(SwigDirectorGetFileTypeCount);
    if (SwigDerivedClassHasMethod("GetFileType", swigMethodTypes2))
      swigDelegate2 = new SwigDelegateIPlugIn_2(SwigDirectorGetFileType);
    if (SwigDerivedClassHasMethod("GetFileExtention", swigMethodTypes3))
      swigDelegate3 = new SwigDelegateIPlugIn_3(SwigDirectorGetFileExtention);
    if (SwigDerivedClassHasMethod("ReadFile", swigMethodTypes4))
      swigDelegate4 = new SwigDelegateIPlugIn_4(SwigDirectorReadFile__SWIG_0);
    if (SwigDerivedClassHasMethod("ReadFile", swigMethodTypes5))
      swigDelegate5 = new SwigDelegateIPlugIn_5(SwigDirectorReadFile__SWIG_1);
    ehPINVOKE.IPlugIn_director_connect(swigCPtr, swigDelegate0, swigDelegate1, swigDelegate2, swigDelegate3, swigDelegate4, swigDelegate5);
  }

  private bool SwigDerivedClassHasMethod(string methodName, global::System.Type[] methodTypes) {
    global::System.Reflection.MethodInfo methodInfo = this.GetType().GetMethod(methodName, global::System.Reflection.BindingFlags.Public | global::System.Reflection.BindingFlags.NonPublic | global::System.Reflection.BindingFlags.Instance, null, methodTypes, null);
    bool hasDerivedMethod = methodInfo.DeclaringType.IsSubclassOf(typeof(IPlugIn));
    return hasDerivedMethod;
  }

  [return: global::System.Runtime.InteropServices.MarshalAs(global::System.Runtime.InteropServices.UnmanagedType.LPWStr)]
  private string SwigDirectorGetAboutString() {
    return GetAboutString();
  }

  private int SwigDirectorGetFileTypeCount() {
    return GetFileTypeCount();
  }

  [return: global::System.Runtime.InteropServices.MarshalAs(global::System.Runtime.InteropServices.UnmanagedType.LPWStr)]
  private string SwigDirectorGetFileType(int i) {
    return GetFileType(i);
  }

  [return: global::System.Runtime.InteropServices.MarshalAs(global::System.Runtime.InteropServices.UnmanagedType.LPWStr)]
  private string SwigDirectorGetFileExtention(int i) {
    return GetFileExtention(i);
  }

  private bool SwigDirectorReadFile__SWIG_0(string aFile, global::System.IntPtr sceneHandle, global::System.IntPtr callback) {
    return ReadFile(aFile, sceneHandle, (callback == global::System.IntPtr.Zero) ? null : new Callback(callback, false));
  }

  private bool SwigDirectorReadFile__SWIG_1(string aFile, global::System.IntPtr sceneHandle) {
    return ReadFile(aFile, sceneHandle);
  }

  [return: global::System.Runtime.InteropServices.MarshalAs(global::System.Runtime.InteropServices.UnmanagedType.LPWStr)]
  public delegate string SwigDelegateIPlugIn_0();
  public delegate int SwigDelegateIPlugIn_1();
  [return: global::System.Runtime.InteropServices.MarshalAs(global::System.Runtime.InteropServices.UnmanagedType.LPWStr)]
  public delegate string SwigDelegateIPlugIn_2(int i);
  [return: global::System.Runtime.InteropServices.MarshalAs(global::System.Runtime.InteropServices.UnmanagedType.LPWStr)]
  public delegate string SwigDelegateIPlugIn_3(int i);
  public delegate bool SwigDelegateIPlugIn_4(string aFile, global::System.IntPtr sceneHandle, global::System.IntPtr callback);
  public delegate bool SwigDelegateIPlugIn_5(string aFile, global::System.IntPtr sceneHandle);

  private SwigDelegateIPlugIn_0 swigDelegate0;
  private SwigDelegateIPlugIn_1 swigDelegate1;
  private SwigDelegateIPlugIn_2 swigDelegate2;
  private SwigDelegateIPlugIn_3 swigDelegate3;
  private SwigDelegateIPlugIn_4 swigDelegate4;
  private SwigDelegateIPlugIn_5 swigDelegate5;

  private static global::System.Type[] swigMethodTypes0 = new global::System.Type[] {  };
  private static global::System.Type[] swigMethodTypes1 = new global::System.Type[] {  };
  private static global::System.Type[] swigMethodTypes2 = new global::System.Type[] { typeof(int) };
  private static global::System.Type[] swigMethodTypes3 = new global::System.Type[] { typeof(int) };
  private static global::System.Type[] swigMethodTypes4 = new global::System.Type[] { typeof(string), typeof(global::System.IntPtr), typeof(Callback) };
  private static global::System.Type[] swigMethodTypes5 = new global::System.Type[] { typeof(string), typeof(global::System.IntPtr) };
}

}
