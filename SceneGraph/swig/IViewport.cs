//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace eh {

public class IViewport : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnBase;

  internal IViewport(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwnBase = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(IViewport obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~IViewport() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnBase) {
          swigCMemOwnBase = false;
          ehPINVOKE.delete_IViewport(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public virtual void setDisplayRect(int x, int y, int dx, int dy) {
    ehPINVOKE.IViewport_setDisplayRect(swigCPtr, x, y, dx, dy);
    if (ehPINVOKE.SWIGPendingException.Pending) throw ehPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void drawScene() {
    ehPINVOKE.IViewport_drawScene(swigCPtr);
    if (ehPINVOKE.SWIGPendingException.Pending) throw ehPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual string getDriverInfo() {
    string ret = ehPINVOKE.IViewport_getDriverInfo(swigCPtr);
    if (ehPINVOKE.SWIGPendingException.Pending) throw ehPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool loadScene(string filePath, Callback callback) {
    bool ret = ehPINVOKE.IViewport_loadScene__SWIG_0(swigCPtr, filePath, Callback.getCPtr(callback));
    if (ehPINVOKE.SWIGPendingException.Pending) throw ehPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool loadScene(string filePath) {
    bool ret = ehPINVOKE.IViewport_loadScene__SWIG_1(swigCPtr, filePath);
    if (ehPINVOKE.SWIGPendingException.Pending) throw ehPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool isValid() {
    bool ret = ehPINVOKE.IViewport_isValid(swigCPtr);
    if (ehPINVOKE.SWIGPendingException.Pending) throw ehPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual IController control() {
    global::System.IntPtr cPtr = ehPINVOKE.IViewport_control(swigCPtr);
    IController ret = (cPtr == global::System.IntPtr.Zero) ? null : new IController(cPtr, false);
    if (ehPINVOKE.SWIGPendingException.Pending) throw ehPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
