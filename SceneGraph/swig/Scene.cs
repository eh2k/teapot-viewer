//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace eh {

public class Scene : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Scene(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Scene obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~Scene() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          ehPINVOKE.delete_Scene(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public static IGeometry CreateGeometry() {
    global::System.IntPtr cPtr = ehPINVOKE.Scene_CreateGeometry();
    IGeometry ret = (cPtr == global::System.IntPtr.Zero) ? null : new IGeometry(cPtr, true);
    return ret;
  }

  public static IMaterial CreateMaterial() {
    global::System.IntPtr cPtr = ehPINVOKE.Scene_CreateMaterial();
    IMaterial ret = (cPtr == global::System.IntPtr.Zero) ? null : new IMaterial(cPtr, true);
    return ret;
  }

  public static IShapeNode CreateShapeNode(IMaterial material, IGeometry geometry) {
    global::System.IntPtr cPtr = ehPINVOKE.Scene_CreateShapeNode(IMaterial.getCPtr(material), IGeometry.getCPtr(geometry));
    IShapeNode ret = (cPtr == global::System.IntPtr.Zero) ? null : new IShapeNode(cPtr, true);
    return ret;
  }

  public static IGroupNode CreateGroupNode(Matrix transform) {
    global::System.IntPtr cPtr = ehPINVOKE.Scene_CreateGroupNode(Matrix.getCPtr(transform));
    IGroupNode ret = (cPtr == global::System.IntPtr.Zero) ? null : new IGroupNode(cPtr, true);
    if (ehPINVOKE.SWIGPendingException.Pending) throw ehPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static IGroupNode TryGetGroupNodeFromHandle(global::System.IntPtr handle) {
    global::System.IntPtr cPtr = ehPINVOKE.Scene_TryGetGroupNodeFromHandle(handle);
    IGroupNode ret = (cPtr == global::System.IntPtr.Zero) ? null : new IGroupNode(cPtr, true);
    return ret;
  }

  public static global::System.IntPtr NodeToHandle(ISceneNode sceneNode) {
    global::System.IntPtr ret = ehPINVOKE.Scene_NodeToHandle(ISceneNode.getCPtr(sceneNode));
    return ret;
  }

  public static MaterialVector GetMaterials(ISceneNode sceneNode) {
    MaterialVector ret = new MaterialVector(ehPINVOKE.Scene_GetMaterials(ISceneNode.getCPtr(sceneNode)), true);
    return ret;
  }

  public Scene() : this(ehPINVOKE.new_Scene(), true) {
  }

}

}
