//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace eh {

public class AABBox : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal AABBox(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(AABBox obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~AABBox() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          ehPINVOKE.delete_AABBox(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public AABBox() : this(ehPINVOKE.new_AABBox__SWIG_0(), true) {
  }

  public AABBox(Vec3 min, Vec3 max) : this(ehPINVOKE.new_AABBox__SWIG_1(Vec3.getCPtr(min), Vec3.getCPtr(max)), true) {
    if (ehPINVOKE.SWIGPendingException.Pending) throw ehPINVOKE.SWIGPendingException.Retrieve();
  }

  public Vec3 getMin() {
    Vec3 ret = new Vec3(ehPINVOKE.AABBox_getMin(swigCPtr), false);
    return ret;
  }

  public Vec3 getMax() {
    Vec3 ret = new Vec3(ehPINVOKE.AABBox_getMax(swigCPtr), false);
    return ret;
  }

  public Vec3 getSize() {
    Vec3 ret = new Vec3(ehPINVOKE.AABBox_getSize(swigCPtr), false);
    return ret;
  }

  public Vec3 getCenter() {
    Vec3 ret = new Vec3(ehPINVOKE.AABBox_getCenter(swigCPtr), false);
    return ret;
  }

  public float getRadius() {
    float ret = ehPINVOKE.AABBox_getRadius(swigCPtr);
    return ret;
  }

  public Vec3Vector getCorners() {
    Vec3Vector ret = new Vec3Vector(ehPINVOKE.AABBox_getCorners(swigCPtr), true);
    return ret;
  }

  public AABBox.INSIDE_RESULT isInside(Vec3 p) {
    AABBox.INSIDE_RESULT ret = (AABBox.INSIDE_RESULT)ehPINVOKE.AABBox_isInside__SWIG_0(swigCPtr, Vec3.getCPtr(p));
    if (ehPINVOKE.SWIGPendingException.Pending) throw ehPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public AABBox.INSIDE_RESULT isInside(AABBox box) {
    AABBox.INSIDE_RESULT ret = (AABBox.INSIDE_RESULT)ehPINVOKE.AABBox_isInside__SWIG_1(swigCPtr, AABBox.getCPtr(box));
    if (ehPINVOKE.SWIGPendingException.Pending) throw ehPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool intersect(AABBox aab) {
    bool ret = ehPINVOKE.AABBox_intersect(swigCPtr, AABBox.getCPtr(aab));
    if (ehPINVOKE.SWIGPendingException.Pending) throw ehPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void divide(AABBox a, AABBox b) {
    ehPINVOKE.AABBox_divide(swigCPtr, AABBox.getCPtr(a), AABBox.getCPtr(b));
    if (ehPINVOKE.SWIGPendingException.Pending) throw ehPINVOKE.SWIGPendingException.Retrieve();
  }

  public float getVolume() {
    float ret = ehPINVOKE.AABBox_getVolume(swigCPtr);
    return ret;
  }

  public bool valid() {
    bool ret = ehPINVOKE.AABBox_valid(swigCPtr);
    return ret;
  }

  public enum INSIDE_RESULT {
    OUTSIDE = 0,
    INSIDE = 1,
    INTERSECT = 2
  }

}

}
